---
css: |
  *{font-family:Sans-serif}
  table{border-collapse:collapse;border-spacing:0;empty-cells:show;border:1px solid #cbcbcb}
  td,th{font-size:inherit;margin:0;overflow:visible;padding:.5em 1em;border-bottom:1px solid #cbcbcb}
  thead{background-color:#e0e0e0;color:#000;text-align:left;vertical-align:bottom}
  td{background-color:transparent}
  tr:nth-child(2n-1) td{background-color:#f2f2f2}
  tbody>tr:last-child>td{border-bottom-width:0}
  .danger{color:red;font-weight:700}
  .caution{color:#ff8c00;font-weight:700}
  .success{color:green}
html: |
  <!DOCTYPE html>
  <html>
      <head>
          <meta charset="utf-8">
          <title>${title}</title>
          <link rel="stylesheet" href="https://unpkg.com/balloon-css/balloon.min.css">
          <style>
              ${style}
          </style>
      </head>
      <body>
          <h2>${title}</h2>
          <p>This custom HTML template overrides the built-in template. Edit or remove the 'html' key in your config file to change this.</p>
          ${table}
          <p>${footer}</p>
      </body>
  </html>
api:
  telemeter:
    url: "[INSERT PROMETHEUS API URL HERE]"
    token: "[INSERT TOKEN HERE]"
  uhc:
    url: "https://api.openshift.com"
    # The Red Hat public key is below, but you can extract your own from a known-safe login token using https://jwt.io/
    public_key: |
      -----BEGIN PUBLIC KEY-----
      MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuYp35gi5YzQeNN5aQOPw
      LranSJT9aJB+w6Ih4Wn9R6FzEg1OEKwBNNpb+z18reAyhxQMy/bCz3q+J7viX6p5
      hbclPBakKOjPB4lDzwhvfE1G4vp84zH1bR7m8dd4OXbriojVZ51IPNuItO00nrDr
      x6PWNP/5ufBUwjJo8+BD+sWm7BP/CVlb8miVh8itpcLJrszpHzF+u0OPqwI/e3P8
      3cYOsXoQRxD4wpo718yqYh4J3NNJQYnyprJMpC3w3QQ5PR28TbBfSHgvtWD1SBua
      vHh2jwT/6Pi8FqOS1vfX7QA1pxyYZ+zazVxj/zOrCeP3FHyaxTPmn0d5zsXBZCCy
      hsfCaStnFePTPk+KEGwZAlv43JJjV2rTJc1Lsj1Th7Jq63TvwIGBcFFAtC72N5+j
      wRjUoeyu/nwO/1r1awvbfrlBF31PG5wxUdVR56PesLO7EVH1/2KrVN7dtgaQkomV
      k6rULBbCbwhfR1oT3cOxF7d0ajpbzHd2qcfeBzFTABL8dzBp4FcZx5QyYSIOP8fu
      wSO8zy4rxmBw7HpHGOGFrC3cXWqB33M23IjOpVZbfK46QvJhcGq9QEtOlRO2WVem
      McwDSgpceAa7e3ZJx+LO6XyTEjRtTuHMwdLxII3YUlL1hPozrNE1U/ADPGHgnTxG
      swgBpGOA6rOkWav5uhcj9CsCAwEAAQ==
      -----END PUBLIC KEY-----
    token: "[INSERT TOKEN HERE]"
clusters:
  - "managed = 't'"
global_vars:
  duration: 7
rules:
  - name: "CtrlPlane General"
    description: "The proportion of time when no control plane errors are reported as measured from critical alerts in Prometheus."
    goal: 0.995
    query: |
        clamp_max(
          sum_over_time(
            (clamp_max(
              sum without (alertstate, severity) (
                absent(alerts{
                  severity='critical',
                  alertstate='firing',
                  namespace=~'(default|kube.*|openshift.*)',
                  alertname=~'(KubeAPIDown|KubeControllerManagerDown|KubeSchedulerDown|KubeletDown|KubeAPILatencyHigh)',
                  ${sel}
                })
              ),1
          ))[${duration}d:10m]
        ) / (${duration} * 24 * 6) > 0, 1
        )
  - name: "CtrlPlane API"
    description: "The proportion of successful (HTTP status < 500) responses to API requests as measured from Prometheus."
    goal: 0.999
    query: |
      (
        (
          sum(sum_over_time(code:apiserver_request_count:rate:sum{${sel}}[${duration}d])) -
          sum(sum_over_time(code:apiserver_request_count:rate:sum{code=~'5.*',${sel}}[${duration}d]))
        ) / sum(sum_over_time(code:apiserver_request_count:rate:sum{${sel}}[${duration}d]))
      ) OR (absent(code:apiserver_request_count:rate:sum{code=~'5.*',${sel}} == 0))
  - name: "CtrlPlane etcd"
    description: "The proportion of time when at least one etcd pod reports as ready as measured by Prometheus."
    goal: 0.999
    query: |
      clamp_max(
        sum_over_time(
          (
            sum(up{service='etcd',${sel}}) > bool 0
          )[${duration}d:10m]
        ) / (${duration} * 24 * 6) > 0, 1
      )
  - name: "CtrlPlane Latency"
    description: "The proportion of time when no critical KubeAPILatencyHigh alerts are reported in Prometheus."
    goal: 0.995
    query: |
        clamp_max(
          sum_over_time(
            (clamp_max(
              sum without (alertstate, severity) (
                absent(alerts{
                  severity='critical',
                  alertstate='firing',
                  namespace=~'(default|kube.*|openshift.*)',
                  alertname=~'(KubeAPILatencyHigh)',
                  ${sel}
                })
              ),1
          ))[${duration}d:10m]
        ) / (${duration} * 24 * 6) > 0, 1
        )
  - name: "Registry General"
    description: "The proportion of successful responses to API requests to the registry as measured from Prometheus."
    goal: 0.99
    query: |
      clamp_max(
        sum_over_time(
          (
            sum(up{service='image-registry',${sel}}) > bool 0
          )[${duration}d:10m]
        ) / (${duration} * 24 * 6) > 0, 1
      )
  - name: "Compute General"
    description: "The proportion of time when no compute errors are reported as measured from critical alerts in Prometheus."
    goal: 0.995
    query: |
        clamp_max(
          sum_over_time(
            (clamp_max(
              sum without (alertstate, severity) (
                absent(alerts{
                  severity='critical',
                  alertstate='firing',
                  namespace=~'(default|kube.*|openshift.*)',
                  alertname=~'(KubeClientCertificateExpiration|KubePodCrashLooping|KubePodNotReady|KubePersistentVolumeUsageCritical)',
                  ${sel}
                })
              ),1
          ))[${duration}d:10m]
        ) / (${duration} * 24 * 6) > 0, 1
        )
  - name: "Compute Resiliency"
    description: "The proportion of time when no compute mismatches are reported as measured from critical alerts in Prometheus."
    goal: 0.99
    query: |
        clamp_max(
          sum_over_time(
            (clamp_max(
              sum without (alertstate, severity) (
                absent(alerts{
                  severity='critical',
                  alertstate='firing',
                  namespace=~'(default|kube.*|openshift.*)',
                  alertname=~'(.*Mismatch|.*Stuck)',
                  ${sel}
                })
              ),1
          ))[${duration}d:10m]
        ) / (${duration} * 24 * 6) > 0, 1
        )
  - name: "Support Monitoring"
    description: "The proportion of time when monitoring is available measured by critical alerts for monitoring, metrics, and prometheus in Prometheus."
    goal: 0.9999
    query: |
        clamp_max(
          sum_over_time(
            (clamp_max(
              sum without (alertstate, severity) (
                absent(alerts{
                  severity='critical',
                  alertstate='firing',
                  namespace=~'(default|kube.*|openshift.*)',
                  alertname=~'(ClusterMonitoringOperator.*|KubeStateMetricsDown|Prometheus.*Down)',
                  ${sel}
                })
              ),1
          ))[${duration}d:10m]
        ) / (${duration} * 24 * 6) > 0, 1
        )
...