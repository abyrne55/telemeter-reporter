#!/usr/bin/env python3
import sys;

print('Python %s on %s' % (sys.version, sys.platform))
sys.path.extend(['/home/abyrne/Documents/telemeter-sla-reporter'])
from telemeter_sla_reporter import SLAReporter
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import yaml
import os.path

# Handle command line args
argp = ArgumentParser(
    formatter_class=ArgumentDefaultsHelpFormatter,
    description="Tool for generating reports on SLA/SLO compliance using Telemeter-LTS data",
)

argp.add_argument(
    "-c", "--config", help="Path to YAML file containing configuration data", default="~/.telemeter_sla_reporter.yml"
)
argp.add_argument(
    "-o", "--output", help="Path to where to save the generated report (- = stdout)", default="-"
)
argp.add_argument(
    "-f", "--format", help="Tabulate format for the report", default="simple",
)
argp.add_argument(
    "-q", "--uhc-query", help="Report on all clusters returned by this query to the UHC API",
)
args = argp.parse_args()

# Load config file
with open(os.path.expanduser(args.config), 'r') as f:
    config = yaml.safe_load(f)

# Create SLAReporter instance
slar = SLAReporter(config)

# Get Cluster external_ids
if args.uhc_query:
    clids = slar.get_cluster_ids(args.uhc_query)
else:
    clids = {}
    for uhc_query in config['clusters']:
        clids.update(slar.get_cluster_ids(uhc_query))

# Do the actual queries (this may take a while...)
rep = slar.generate_report(clids, fmt=args.format)

pure_css = """<style> .pure-table{border-collapse:collapse;border-spacing:0;empty-cells:show;border:1px solid 
#cbcbcb;font-family:Sans-serif}.pure-table td,.pure-table th{border-left:1px solid #cbcbcb;border-width:0 0 0 
1px;font-size:inherit;margin:0;overflow:visible;padding:.5em 1em}.pure-table thead{
background-color:#e0e0e0;color:#000;text-align:left;vertical-align:bottom}.pure-table td{
background-color:transparent}.pure-table-odd td{background-color:#f2f2f2}.pure-table-striped tr:nth-child(2n-1) td{
background-color:#f2f2f2}.pure-table-bordered td{border-bottom:1px solid #cbcbcb}.pure-table-bordered tbody > 
tr:last-child > td{border-bottom-width:0}.pure-table-horizontal td,.pure-table-horizontal th{border-width:0 0 
1px;border-bottom:1px solid #cbcbcb}.pure-table-horizontal tbody > tr:last-child > td{border-bottom-width:0}.danger{
color:red;font-weight:700}.caution{color:#ff8c00;font-weight:700}.success{color:green} </style>"""
# Format the report
headers = [x.replace(' ', '\n') for x in slar.generate_headers()]
formatted_report = slar.format_report(headers, rep, css=pure_css, fmt=args.format).replace("<table>",
                                                                                           "<table class='pure-table pure-table-striped pure-table-horizontal'>")

if args.output == "-":
    print(formatted_report)
else:
    with open(args.output, 'w') as f:
        f.write(formatted_report)
