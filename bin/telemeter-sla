#!/usr/bin/env python3
import csv
import io
import sys
import urllib.parse
import webbrowser
import signal

# print('Python %s on %s' % (sys.version, sys.platform))
# TODO REMOVE PATH EXTEND!
sys.path.extend(['/home/abyrne/Documents/telemeter-sla-reporter'])


from telemeter_sla_reporter import SLAReporter
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import yaml
import os.path


# Handle Ctrl-C
def signal_handler(sig, frame):
    print('Received SIGINT. Exiting...')
    sys.exit(0)


signal.signal(signal.SIGINT, signal_handler)

# Handle command line args
arg_parser = ArgumentParser(
    formatter_class=ArgumentDefaultsHelpFormatter,
    description="Tool for generating reports on SLA/SLO compliance using Telemeter-LTS data",
)

arg_parser.add_argument(
    "-c", "--config", help="Path to YAML file containing configuration data", default="~/.telemeter_sla_reporter.yml",
    metavar="PATH"
)
arg_parser.add_argument(
    "output", help="Path to where to save the generated report (- = stdout)"
)
format_choices=['simple', 'plain', 'html', 'csv', 'grid', 'fancy_grid', 'github', 'jira', 'latex', ]
arg_parser.add_argument(
    "-f", "--format", help="Format for the report. Options: {}".format(str(format_choices)), default="simple", metavar="FMT",
    choices=format_choices
)
arg_parser.add_argument(
    "-u", "--uhc-query", help="Report on all clusters returned by this query to the UHC API", metavar='QUERY'
)
arg_parser.add_argument(
    "-b", "--no-browser", help="Don't open the resulting report in a web browser (if HTML report is selected)",
    action="store_true",
)
args = arg_parser.parse_args()

# Load config file
with open(os.path.expanduser(args.config), 'r') as f:
    config = yaml.safe_load(f)

# Create SLAReporter instance
slar = SLAReporter(config)

# Get Cluster external_ids
if args.uhc_query:
    cluster_ids = slar.get_cluster_ids(args.uhc_query)
else:
    cluster_ids = {}
    for uhc_query in config['clusters']:
        cluster_ids.update(slar.get_cluster_ids(uhc_query))

# Do the actual queries (this may take a while...)
raw_report = slar.generate_report(cluster_ids, fmt=args.format)

pure_css = """<style> .pure-table{border-collapse:collapse;border-spacing:0;empty-cells:show;border:1px solid 
#cbcbcb;font-family:Sans-serif}.pure-table td,.pure-table th{border-left:1px solid #cbcbcb;border-width:0 0 0 
1px;font-size:inherit;margin:0;overflow:visible;padding:.5em 1em}.pure-table thead{
background-color:#e0e0e0;color:#000;text-align:left;vertical-align:bottom}.pure-table td{
background-color:transparent}.pure-table-odd td{background-color:#f2f2f2}.pure-table-striped tr:nth-child(2n-1) td{
background-color:#f2f2f2}.pure-table-bordered td{border-bottom:1px solid #cbcbcb}.pure-table-bordered tbody > 
tr:last-child > td{border-bottom-width:0}.pure-table-horizontal td,.pure-table-horizontal th{border-width:0 0 
1px;border-bottom:1px solid #cbcbcb}.pure-table-horizontal tbody > tr:last-child > td{border-bottom-width:0}.danger{
color:red;font-weight:700}.caution{color:#ff8c00;font-weight:700}.success{color:green} </style>"""

# Format the report
if args.format == "html":
    headers = slar.generate_headers()
    formatted_report = slar.format_report(headers=headers, table=raw_report, css=pure_css, fmt=args.format)
    formatted_report = formatted_report.replace("<table>",
                                                "<table class='pure-table pure-table-striped pure-table-horizontal'>")
elif args.format == "csv":
    str_buff = io.StringIO()
    csv_writer = csv.writer(str_buff)
    for row in [slar.generate_headers()] + raw_report:
        csv_writer.writerow(row)
    formatted_report = str_buff.getvalue().replace('%', '')
    str_buff.close()
else:
    headers = [x.replace(' ', '\n') for x in slar.generate_headers()]
    formatted_report = slar.format_report(headers=headers, table=raw_report, fmt=args.format)

# Output report
if args.output == "-":
    print(formatted_report)
else:
    save_path = os.path.abspath(os.path.expanduser(args.output))
    with open(save_path, 'w') as f:
        f.write(formatted_report)
    if args.format == "html" and not args.no_browser:
        webbrowser.open_new_tab("file://" + urllib.parse.quote(save_path))
